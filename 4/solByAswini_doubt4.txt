#include<iostream>
#include<string.h>
#include<vector>
#include<algorithm>
#include<set>

using namespace std;

//to check whether its prime
bool isprime(int n)
{
  if (n<=1)
    return false;
    
for(int i=2;i<=n/2;i++)
  if (n%i == 0)
     return false;
     

return true;
	
}
 
//main function
int main()
{
int n ,n1 ;
cin>>n>>n1;
 
int flag,i;

   vector <int> arr;// declaring a vector to save the derived  prime numbers bet. two numbers 
  while (n<=n1)
  {
  	flag =0;
  	for( i=2;i<=n/2;i++)
  	{
  		if (n%i==0)
  		{
		
  		flag = 1;
  		break;
  	}
	  }
   if(flag==0)
   
 arr.push_back(n);
   n++;  
}
/*cout<<"\n";
for (int i = 0;i<arr.size();i++)
{
	cout<<arr[i]<<endl;
}*/
int len=arr.size();
//cout<<len;


vector<int> comb;  //declaring a vector to save the combinatons of above prime no's
int c;

for (int i = 0;i<len;i++)
{
	if (arr[i]>0 && arr[i]<10){
	
	for (int j=0;j<len;j++){
		if (arr[i]==arr[j])
	 continue;
	 if(arr[j]>0 && arr[j]<10){
	 
		c=arr[i]*10+arr[j];
		comb.push_back(c);
		c++;
		}
	else if (arr[j]>=10 && arr[j]<100){
			c=arr[i]*100+arr[j];
		comb.push_back(c);
		c++;
	}
	else if(arr[j]>=100 && arr[j]<1000){
		c=arr[i]*1000+arr[j];
		comb.push_back(c);
		c++;
	}
			
}
}
    else if (arr[i]>=10 && arr[i]<100)
    {
    for (int j=0;j<len;j++){
		if (arr[i]==arr[j])
	 continue;
	 if (arr[j]>0 && arr[j]<10){
	 
	c=	arr[i]*10+arr[j];
		comb.push_back(c);
		c++;
	}
	else if (arr[j]>=10 && arr[j]<100)
	{
		c=arr[i]*100+arr[j];
		comb.push_back(c);
		c++;
	}
	else if (arr[j]>=100 && arr[j]<1000)
	{
		c=arr[i]*1000+arr[j];
		comb.push_back(c);
		c++;
	}
			
}	
	}
	else if (arr[i]>=100 && arr[i]<1000)
    {
    for (int j=0;j<len;j++){
		if (arr[i]==arr[j])
	 continue;
	 if (arr[j]>0 && arr[j]<10)
	 {
	 
	c=	arr[i]*10+arr[j];
		comb.push_back(c);
		c++;
	}
    else if (arr[j]>=10 && arr[j]<100)
	 {
	 
	c=	arr[i]*100+arr[j];
		comb.push_back(c);
		c++;
	}
	else if (arr[j]>=100 && arr[j]<1000)
	 {
	 
	c=	arr[i]*1000+arr[j];
		comb.push_back(c);
		c++;
	}			
}	
	}
	
}
/*cout<<"\n\n\n";
for (int i = 0;i<comb.size();i++)
{
	cout<<comb[i]<<endl;
}
*/
int len_comb=comb.size();
//cout<<len_comb;



//for removing duplicates in combination
int l;
int d;
vector<int>dupli;
set<int>s;
for (l=0;l<len_comb;l++)
{
	s.insert(comb[l]);
}
set<int>::iterator it;

for (it =s.begin();it!=s.end();it++){

  d=*it;
  dupli.push_back(d);
  d++;
  }
/*cout<<"\n\n";
for (int i = 0;i<dupli.size();i++)
{
	cout<<dupli[i]<<endl;
}*/
int len_dupli=dupli.size();
//cout<<len_dupli<<endl;
  
  
  
 //vector for storing the prime numbers derived from second list
 vector<int> prime;
 int p;
 
for (int i=0;i<dupli.size();i++)
{
	if(isprime(dupli[i]))
	 
	prime.push_back(dupli[i]);	
}
int len_prime=prime.size();
//cout<<len_prime<<endl;

/*cout<<"\n\n\n";
for (int j = 0;j<prime.size();j++)
{
	cout<<prime[j]<<endl;
}*/

//finding out the smallest and largest value
int mini,maxi;
mini= *min_element(prime.begin(),prime.end());
maxi= *max_element(prime.begin(),prime.end());
//cout<<mini<<" "<<maxi<<endl;

//fibonacci function
 int first=mini, second=maxi,k,sum=0;
 for(k=2;k<(len_prime);k++)
 {
	 	sum = first+second;
	 	first = second;
	 	second =sum; 
} 
 cout<<sum; 

return 0;	
}